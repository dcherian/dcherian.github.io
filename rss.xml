<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Deepak Cherian</title>
  <atom:link href="http://www.cherian.net/rss.xml" rel="self" type="application/rss+xml" />
  <link>http://www.cherian.net/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Sun, 24 Feb 2019 07:44:41 +0530</pubDate>
  <lastBuildDate>Sun, 24 Feb 2019 07:44:41 +0530</lastBuildDate>
  <generator>Emacs 27.0 Org-mode 9.2.1</generator>
  <webMaster>deepak@darya (Deepak Cherian)</webMaster>
  <image>
    <url>https://orgmode.org/img/org-mode-unicorn-logo.png</url>
    <title>Deepak Cherian</title>
    <link>http://www.cherian.net/</link>
  </image>

  <div id="table-of-contents">
    <h2>Table of Contents</h2>
    <div id="text-table-of-contents">
      <ul>
	<li><a href="#orgb042aaa">1. bokeh js plots and org-mode HTML export</a>
	<ul>
	  <li><a href="#org092634b">1.1. Introduction</a></li>
	  <li><a href="#orge2df94c">1.2. Using <code>autoload_static</code> (preferred)</a>
	  <ul>
	    <li><a href="#orgba6b88c">Prerequisites</a></li>
	    <li><a href="#orgfeebff1">Example</a></li>
	    <li><a href="#orgead39ca">Improvements</a></li>
	  </ul>
	  </li>
	  <li><a href="#org94d12a0">1.3. Using components (not-recommended)</a></li>
	  <li><a href="#orgec63fb7">1.4. Appendix</a>
	  <ul>
	    <li><a href="#orgf26e6a2">yasnippet</a></li>
	    <li><a href="#org1d4d9d9">Dependencies</a></li>
	    <li><a href="#org532b997">Styling</a></li>
	    <li><a href="#orgd4994a9">Source</a></li>
	  </ul>
	  </li>
	</ul>
	</li>
	<li><a href="#orgea7579a">2. xkcd-style schematics using matplotlib.</a></li>
	<li><a href="#org0580920">3. Interesting quotes from the scientific literature</a></li>
	<li><a href="#org22dfb75">4. Bibliography</a></li>
	<li><a href="#orga586cbc">5. "Death in the Gulf Stream" - A Hemingway cocktail</a></li>
	<li><a href="#org6b48d4c">6. A setup for reproducible research</a>
	<ul>
	  <li><a href="#org935c4e7">6.1. Update</a></li>
	  <li><a href="#org09690da">6.2. Software</a></li>
	  <li><a href="#org54b1741">6.3. Strategy</a></li>
	  <li><a href="#orgd9b29ec">6.4. Getting the current hash in MATLAB</a></li>
	  <li><a href="#orgb0454fb">6.5. Using the hash</a></li>
	  <li><a href="#org8fb251f">6.6. Saving the hash in an image file</a></li>
	  <li><a href="#org8667966">6.7. Extracting commit hash from image metadata</a></li>
	</ul>
	</li>
      </ul>
    </div>
  </div>

  <item>
    <title>bokeh js plots and org-mode HTML export</title>
    <link>http://www.cherian.net/rss.html#orgb042aaa</link>
    <author>deepak@darya (Deepak Cherian)</author>
    <guid isPermaLink="false">http://www.cherian.net/rss.html#orgb042aaa</guid>
    <pubDate>Sat, 04 Nov 2017 21:28:00 +0530</pubDate>

    <description><![CDATA[
    <div id="outline-container-org092634b" class="outline-3">
    <h3 id="org092634b"><span class="section-number-3">1.1</span> Introduction</h3>
    <div class="outline-text-3" id="text-1-1">
    <p>
    I've been wanting to play around with interactive Javascript plots for a while; for example: <a href="https://demo.bokehplots.com/apps/selection_histogram">https://demo.bokehplots.com/apps/selection_histogram</a>. The selection functionality is really cool!
    </p>

    <p>
    This post is an experiment in embedding <a href="http://bokeh.pydata.org">bokeh</a> plots in org-mode notebooks that rendered properly when exported as HTML pages. There are two approaches for embedding.
    </p>
    </div>
    </div>

    <div id="outline-container-orge2df94c" class="outline-3">
    <h3 id="orge2df94c"><span class="section-number-3">1.2</span> Using <code>autoload_static</code> (preferred)</h3>
    <div class="outline-text-3" id="text-1-2">
    <p>
    Based on <a href="https://necromuralist.github.io/data_science/posts/bokeh-test/">https://necromuralist.github.io/data_science/posts/bokeh-test/</a>
    </p>

    <p>
    Some notes:
    </p>
    <ol class="org-ol">
    <li>This method stores the data in a separate <code>.js</code> file which should make the org file easier to handle. Also, the figure can embedded freely in many places.</li>
    <li>Figuring where to get the bokeh css and js files can be tricky (<a href="https://bokeh.pydata.org/en/latest/docs/reference/resources.html">docs</a>):
    <ol class="org-ol">
    <li>You can use the CDN:  <code>from bokeh.resources import CDN</code> to load the bokeh js file over the internet. Not good for future-proofing.</li>
    <li>Using <code>bokeh.resources.Resources(mode='absolute')</code> or <code>'mode=relative'</code> loads bokeh from your local python installation; so that's good for <i>local</i> notebooks but your figures/notebooks might break when bokeh updates.</li>
    <li>The <code>inline</code> option inlines the necessary js and css in the exported <code>.js</code> file but then with multiple images; you end up with multiple copies so that's wasteful, but seems like the only future-proof option. Also, you can have two figures made with different bokeh versions embedded in the same document, so that's a plus.</li>
    </ol></li>
    </ol>
    </div>

    <div id="outline-container-orgba6b88c" class="outline-4">
    <h4 id="orgba6b88c">Prerequisites</h4>
    <div class="outline-text-4" id="text-orgba6b88c">
    <p>
    I am using
    </p>

    <ol class="org-ol">
    <li>bokeh 0.12.10</li>
    <li>org 9.1.2</li>
    <li>emacs 25.3.50.2</li>
    <li><a href="https://github.com/gregsexton/ob-ipython/commit/1642a74d4402b77ce051879e7605bc7c6537f922">ob-ipython @ 1642a74</a></li>
    </ol>

    <p>
    I define a function <code>export_bokeh</code> to do the actual heavy lifting. This function could be moved to your ipython <code>startup.py</code> file so that it is defined for every ipython session.
    </p>
    <div class="org-src-container">
    <pre class="src src-ipython" id="orgc646743"><span style="color: #E1BEE7;">def</span> <span style="color: #64B5F6;">export_bokeh</span>(plot, outPNG, outJS, outHTML, bkjs=<span style="color: #C5E1A5;">'inline'</span>):
    <span style="color: #E1BEE7;">from</span> bokeh.io <span style="color: #E1BEE7;">import</span> export_png
    <span style="color: #E1BEE7;">from</span> bokeh.embed <span style="color: #E1BEE7;">import</span> autoload_static, file_html
    <span style="color: #E1BEE7;">import</span> bokeh.resources

    <span style="color: #E1BEE7;">if</span> bkjs <span style="color: #E1BEE7;">is</span> <span style="color: #C5E1A5;">'local'</span>:
    <span style="color: #757575;"># </span><span style="color: #757575;">use local installed bokeh scripts</span>
    <span style="color: #80CBC4;">wherebokeh</span> = bokeh.resources.Resources(mode=<span style="color: #C5E1A5;">'absolute'</span>)

    <span style="color: #E1BEE7;">if</span> bkjs <span style="color: #E1BEE7;">is</span> <span style="color: #C5E1A5;">'remote'</span> <span style="color: #E1BEE7;">or</span> bkjs <span style="color: #E1BEE7;">is</span> <span style="color: #C5E1A5;">'CDN'</span>:
    <span style="color: #757575;"># </span><span style="color: #757575;">use CDN bokeh scripts</span>
    <span style="color: #80CBC4;">wherebokeh</span> = bokeh.resources.CDN

    <span style="color: #E1BEE7;">if</span> bkjs <span style="color: #E1BEE7;">is</span> <span style="color: #C5E1A5;">'relative'</span>:
    <span style="color: #757575;"># </span><span style="color: #757575;">bkjs is a relative path to the locally installed bokeh files</span>
    <span style="color: #80CBC4;">wherebokeh</span> = bokeh.resources.Resources(mode=<span style="color: #C5E1A5;">'relative'</span>, root_dir=<span style="color: #C5E1A5;">'./'</span>)

    <span style="color: #E1BEE7;">if</span> bkjs <span style="color: #E1BEE7;">is</span> <span style="color: #C5E1A5;">'inline'</span>:
    <span style="color: #80CBC4;">wherebokeh</span> = bokeh.resources.INLINE

    <span style="color: #757575;"># </span><span style="color: #757575;">save the png file</span>
    export_png(plot, filename=outPNG)

    <span style="color: #757575;"># </span><span style="color: #757575;">save the html file</span>
    <span style="color: #80CBC4;">html</span> = file_html(plot, wherebokeh, <span style="color: #C5CAE9;">None</span>)
    <span style="color: #E1BEE7;">with</span> <span style="color: #80DEEA;">open</span>(outHTML, <span style="color: #C5E1A5;">'w'</span>) <span style="color: #E1BEE7;">as</span> <span style="color: #80DEEA;">file</span>:
    <span style="color: #80DEEA;">file</span>.write(html)

    <span style="color: #80CBC4;">js</span>, <span style="color: #80CBC4;">script</span> = autoload_static(plot, wherebokeh, outJS)

    <span style="color: #757575;"># </span><span style="color: #757575;">save the .js file</span>
    <span style="color: #E1BEE7;">with</span> <span style="color: #80DEEA;">open</span>(outJS, <span style="color: #C5E1A5;">"w"</span>) <span style="color: #E1BEE7;">as</span> writer:
    writer.write(js)

    <span style="color: #757575;"># </span><span style="color: #757575;">embed in the org-exported HTML file</span>
    <span style="color: #E1BEE7;">print</span>(<span style="color: #C5E1A5;">'''#+BEGIN_EXPORT html\n{script}\n#+END_EXPORT'''</span>.<span style="color: #80DEEA;">format</span>(script=script.lstrip()))
    </pre>
    </div>

    <p>
    Embedding the figure is then quite easy once you
    </p>
    <ol class="org-ol">
    <li>tell ob-ipython to capture stdout and put it in a drawer so that it's replaced everytime to rerun the source block.</li>
    <li>provide a custom filename for export (<code>fname</code> below).</li>
    </ol>
    <p>
    I use this header line:
    </p>
    <pre class="example">
    #+BEGIN_SRC ipython :session :results output drawer :exports both :var fname="my-image" :var titlestr="Demonstrating bokeh"
    </pre>
    </div>
    </div>
    <div id="outline-container-orgfeebff1" class="outline-4">
    <h4 id="orgfeebff1">Example</h4>
    <div class="outline-text-4" id="text-orgfeebff1">
    <p>
    This will export a <a href="../static/my-image.png">png image</a>, an <a href="../static/html/my-image.html">HTML file</a> and a <a href="../static/js/my-image.js">Javascript file</a>. That way there are both static and dynamic versions that are easy to share as well as an emebeddable version.
    </p>
    <div class="org-src-container">
    <pre class="src src-ipython"><span style="color: #E1BEE7;">from</span> bokeh.plotting <span style="color: #E1BEE7;">import</span> figure
    <span style="color: #E1BEE7;">from</span> bokeh.layouts <span style="color: #E1BEE7;">import</span> gridplot
    <span style="color: #E1BEE7;">from</span> bokeh.models <span style="color: #E1BEE7;">import</span> ColumnDataSource, HoverTool, WheelZoomTool

    <span style="color: #80CBC4;">tools</span>=<span style="color: #C5E1A5;">'box_select, reset'</span>

    <span style="color: #757575;"># </span><span style="color: #757575;">create "subplots"</span>
    <span style="color: #80CBC4;">p1</span> = figure(tools=tools)
    <span style="color: #80CBC4;">p1.background_fill_alpha</span> = 0.0
    <span style="color: #80CBC4;">p1.border_fill_alpha</span> = 0.0

    <span style="color: #80CBC4;">p2</span> = figure(tools=tools, x_range=p1.x_range, y_range=p1.y_range)
    <span style="color: #80CBC4;">p2.background_fill_alpha</span> = 0.0
    <span style="color: #80CBC4;">p2.border_fill_alpha</span> = 0.0

    <span style="color: #757575;"># </span><span style="color: #757575;">generate data</span>
    <span style="color: #80CBC4;">x</span> = np.random.randn(200)
    <span style="color: #80CBC4;">y0</span> = x**3 - 100
    <span style="color: #80CBC4;">y1</span> = x**2 - 100

    <span style="color: #757575;"># </span><span style="color: #757575;">generate random letters</span>
    <span style="color: #E1BEE7;">import</span> string
    <span style="color: #E1BEE7;">import</span> random
    <span style="color: #80CBC4;">label</span> = [random.choice(string.ascii_letters) <span style="color: #E1BEE7;">for</span> aa <span style="color: #E1BEE7;">in</span> <span style="color: #80DEEA;">range</span>(200)]

    <span style="color: #757575;"># </span><span style="color: #757575;">needed for linked selection</span>
    <span style="color: #80CBC4;">source</span> = ColumnDataSource(data={<span style="color: #C5E1A5;">'x'</span>: x, <span style="color: #C5E1A5;">'y0'</span>: y0, <span style="color: #C5E1A5;">'y1'</span>: y1,
    <span style="color: #C5E1A5;">'label'</span>: label})

    <span style="color: #757575;"># </span><span style="color: #757575;">plot the data</span>
    p1.circle(<span style="color: #C5E1A5;">'x'</span>, <span style="color: #C5E1A5;">'y0'</span>, source=source)
    p2.scatter(<span style="color: #C5E1A5;">'x'</span>, <span style="color: #C5E1A5;">'y1'</span>, source=source)

    <span style="color: #80CBC4;">p1.title.text</span> = titlestr

    <span style="color: #80CBC4;">wheel</span> = WheelZoomTool()
    <span style="color: #757575;"># </span><span style="color: #757575;">add some tooltips</span>
    <span style="color: #80CBC4;">hover</span> = HoverTool()
    <span style="color: #80CBC4;">hover.tooltips</span> = [
    (<span style="color: #C5E1A5;">"(x,y)"</span>, <span style="color: #C5E1A5;">"($x, $y)"</span>),  <span style="color: #757575;"># </span><span style="color: #757575;">'$' for co-ordinates</span>
    (<span style="color: #C5E1A5;">"label"</span>, <span style="color: #C5E1A5;">"@label"</span>)  <span style="color: #757575;"># </span><span style="color: #757575;">note '@' for column lookup</span>
    ]
    p1.add_tools(hover, wheel)
    p2.add_tools(hover, wheel)

    <span style="color: #80CBC4;">p1.toolbar.active_scroll</span> = wheel
    <span style="color: #80CBC4;">p2.toolbar.active_scroll</span> = wheel

    <span style="color: #757575;"># </span><span style="color: #757575;">layout the subplots</span>
    <span style="color: #80CBC4;">pg</span> = gridplot([[p1, p2]], plot_width=400, plot_height=400)

    export_bokeh(pg,
    <span style="color: #C5E1A5;">'../static/'</span>+fname+<span style="color: #C5E1A5;">'.png'</span>,
    <span style="color: #C5E1A5;">'../static/js/'</span>+fname+<span style="color: #C5E1A5;">'.js'</span>,
    <span style="color: #C5E1A5;">'../static/html/'</span>+fname+<span style="color: #C5E1A5;">'.html'</span>)
    </pre>
    </div>
    <script
    src="../static/js/my-image.js"
    id="f1c145ed-260c-411c-8c26-f71b52427218"
    data-bokeh-model-id="5f0145de-1c4e-4ee2-9a64-f38f255c81ff"
    data-bokeh-doc-id="20261111-dbef-4dd0-b40c-d8c04db088bd"
    ></script>

    <p>
    The above figure is a rendering of the <code>RESULTS</code> block:
    </p>
    <pre class="example">
    #+RESULTS:
    :RESULTS:
    #+BEGIN_EXPORT html
    &lt;script
    src="../static/js/my-image.js"
    id="f1c145ed-260c-411c-8c26-f71b52427218"
    data-bokeh-model-id="5f0145de-1c4e-4ee2-9a64-f38f255c81ff"
    data-bokeh-doc-id="20261111-dbef-4dd0-b40c-d8c04db088bd"
    &gt;&lt;/script&gt;
    #+END_EXPORT
    :END:
    </pre>
    </div>
    </div>
    <div id="outline-container-orgead39ca" class="outline-4">
    <h4 id="orgead39ca">Improvements</h4>
    <div class="outline-text-4" id="text-orgead39ca">
    <p>
    Things I would like:
    </p>

    <ul class="org-ul">
    <li>Automatically run the HTML export when running the code block.
    <ul class="org-ul">
    <li>Can I add-hook to <code>org-babel-execute-maybe</code>?</li>
    </ul></li>

    <li>The ability to auto-hide the javascript in the <code>RESULTS</code> drawer but show the exported png file.
    <ul class="org-ul">
    <li>Ideally, I would see the png in the org file and the javascript in the HTML file. The other should be hidden. Seems too complicated.</li>
    <li>A nice solution would be to insert a link to the png file in the image caption.</li>
    </ul></li>

    <li>Are <span class="underline">actual</span> captions (<code>#+CAPTION</code>) possible with bokeh figures?</li>

    <li>Avoid the explicit <code>export_bokeh</code> call if possible.
    <ul class="org-ul">
    <li>Ideally, <code>ob-ipython</code> would be able to tell that this is a bokeh block; use the <code>fname</code> var to pass the figure handle <code>p</code> and <code>fname</code> to <code>export_bokeh</code> and do everything. This would be close to jupyter notebook workflow.</li>
    <li>This might be possible using IPython formatters as suggested by the <code>ob-ipython</code> README.
    <ul class="org-ul">
    <li>Could we then define <code>export_bokeh</code> in <code>imports.py</code> and call that when the returned object is a bokeh figure handle?</li>
    </ul></li>
    </ul></li>

    <li>Can we get holoviews to work with this? Optionally tell it to use either matplotlib or bokeh backends</li>
    </ul>
    </div>
    </div>
    </div>
    <div id="outline-container-org94d12a0" class="outline-3">
    <h3 id="org94d12a0"><span class="section-number-3">1.3</span> Using components (not-recommended)</h3>
    <div class="outline-text-3" id="text-1-3">
    <p>
    I made some slight modifications to <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/02/07/Interactive-Bokeh-plots-in-HTML/">http://kitchingroup.cheme.cmu.edu/blog/2016/02/07/Interactive-Bokeh-plots-in-HTML/</a> though I didn't need to embed anything in a frame. The principal drawback here is that all the data is returned in <code>stdout</code> and written to the org file. This would get unwieldy for big plots.
    </p>

    <ol class="org-ol">
    <li><p>
    Add the following at the top of my org file to use locally downloaded versions of bokeh. Note that versions need to match/be compatible with what you have installed (<code>bokeh.__version__</code>).
    </p>
    <div class="org-src-container">
    <pre class="src src-org">   #+HTML_HEAD: &lt;link rel="stylesheet" href="/home/deepak/tools/bokeh/bokeh-0.12.10.min.css" type="text/css" /&gt;
    #+HTML_HEAD: &lt;link rel="stylesheet" href="/home/deepak/tools/bokeh/bokeh-widgets-0.12.10.min.css" type="text/css" /&gt;
    #+HTML_HEAD: &lt;script type="text/javascript" src="/home/deepak/tools/bokeh/bokeh-0.12.10.min.js"&gt;&lt;/script&gt;
    #+HTML_HEAD: &lt;script type="text/javascript" src="/home/deepak/tools/bokeh/bokeh-widgets-0.12.10.min.js"&gt;&lt;/script&gt;
    </pre>
    </div></li>

    <li>For this website I use the CDN urls they provide : <code>http://cdn.pydata.org/bokeh/release/bokeh-x.y.z.min.css</code> etc.</li>
    </ol>

    <div class="org-src-container">
    <pre class="src src-ipython"><span style="color: #E1BEE7;">def</span> <span style="color: #64B5F6;">WriteToOrg</span>(p):
    <span style="color: #80CBC4;">script</span>, <span style="color: #80CBC4;">div</span> = components(p)

    <span style="color: #80CBC4;">script</span> = <span style="color: #C5E1A5;">'\n'</span>.join([<span style="color: #C5E1A5;">'#+HTML_HEAD_EXTRA: '</span> + line <span style="color: #E1BEE7;">for</span> line <span style="color: #E1BEE7;">in</span> script.lstrip().split(<span style="color: #C5E1A5;">'\n'</span>)])

    <span style="color: #E1BEE7;">print</span>(<span style="color: #C5E1A5;">'''{script}\n#+BEGIN_EXPORT html\n{div}\n#+END_EXPORT'''</span>.<span style="color: #80DEEA;">format</span>(script=script, div=div))


    <span style="color: #E1BEE7;">from</span> bokeh.plotting <span style="color: #E1BEE7;">import</span> figure
    <span style="color: #E1BEE7;">from</span> bokeh.embed <span style="color: #E1BEE7;">import</span> components

    <span style="color: #80CBC4;">p</span> = figure()
    p.line(np.random.randn(200), np.random.randn(200))
    WriteToOrg(p)
    </pre>
    </div>


    <div class="bk-root">
    <div class="bk-plotdiv" id="2752c053-1ddb-4dad-9a62-afb09a61cc38"></div>
    </div>
    </div>
    </div>
    <div id="outline-container-orgec63fb7" class="outline-3">
    <h3 id="orgec63fb7"><span class="section-number-3">1.4</span> Appendix</h3>
    <div class="outline-text-3" id="text-1-4">
    </div>
    <div id="outline-container-orgf26e6a2" class="outline-4">
    <h4 id="orgf26e6a2">yasnippet</h4>
    <div class="outline-text-4" id="text-orgf26e6a2">
    <p>
    A simplified version of the one on <code>ob-ipython</code>. This autogenerates a random filename.
    </p>

    <pre class="example">
    #+BEGIN_SRC ipython :session :results output drawer :exports both :var fname=${1:`(make-temp-name "img")`}
    from bokeh.plotting import figure
    from bokeh.layouts import gridplot
    from bokeh.models import ColumnDataSource, HoverTool, WheelZoomTool

    tools='box_select, reset'

    # create "subplots"
    hf = figure(tools=tools)
    hf.background_fill_alpha = 0.0
    hf.border_fill_alpha = 0.0

    hf.$0

    export_bokeh(hf, 'images/'+fname+'.png', 'images/js/'+fname+'.js', bkjs='inline')
    #+END_SRC
    </pre>
    </div>
    </div>

    <div id="outline-container-org1d4d9d9" class="outline-4">
    <h4 id="org1d4d9d9">Dependencies</h4>
    <div class="outline-text-4" id="text-org1d4d9d9">
    <p>
    Looks like exporting to PNG requires
    </p>
    <pre class="example">
    conda install phantomjs selenium
    </pre>
    </div>
    </div>
    <div id="outline-container-org532b997" class="outline-4">
    <h4 id="org532b997">Styling</h4>
    <div class="outline-text-4" id="text-org532b997">
    <ol class="org-ol">
    <li><p>
    Either include a css file or add a style tag to <code>HTML_HEAD</code> at the top of your org file.
    </p>
    <div class="org-src-container">
    <pre class="src src-org">   #+HTML_HEAD: &lt;style&gt; add-stuff-here &lt;/style&gt;
    </pre>
    </div></li>
    <li><p>
    Targeting the css class <code>bk-plot-layout</code> lets you center the image. <code>bk-grid-column</code> does it for <code>gridplot</code>
    </p>
    <div class="org-src-container">
    <pre class="src src-css">   <span style="color: #64B5F6;">.bk-plot-layout .bk-grid-column </span>{ <span style="color: #E1BEE7;">max-width</span>: 100%; <span style="color: #E1BEE7;">margin</span>: auto;}
    </pre>
    </div></li>
    </ol>
    </div>
    </div>
    <div id="outline-container-orgd4994a9" class="outline-4">
    <h4 id="orgd4994a9">Source</h4>
    <div class="outline-text-4" id="text-orgd4994a9">
    <p>
    Here is <a href="https://raw.githubusercontent.com/dcherian/dcherian.github.io/sources/org/posts/bokeh-org-mode.org">org-mode source</a> for this page.
    </p>
    </div>
    </div>
    </div>
    ]]></description>
</item>
<item>
  <title>xkcd-style schematics using matplotlib.</title>
  <link>http://www.cherian.net/rss.html#orgea7579a</link>
  <author>deepak@darya (Deepak Cherian)</author>
  <guid isPermaLink="false">http://www.cherian.net/rss.html#orgea7579a</guid>
  <pubDate>Sun, 17 Sep 2017 12:36:00 +0530</pubDate>

  <description><![CDATA[<p>
  <a href="https://github.com/dcherian/xkcd-like-schematic/blob/master/schematics.ipynb">IPython notebook here.</a>
  </p>
  ]]></description>
</item>
<item>
  <title>Interesting quotes from the scientific literature</title>
  <link>http://www.cherian.net/rss.html#org0580920</link>
  <author>deepak@darya (Deepak Cherian)</author>
  <guid isPermaLink="false">http://www.cherian.net/rss.html#org0580920</guid>
  <pubDate>Sun, 17 Sep 2017 12:34:00 +0530</pubDate>

  <description><![CDATA[<div class="paper-quotes">

  <ul class="org-ul">
  <li><p>
  (<a href="#org37552c3">Hovmöller 1949</a>)
  </p>


  <div class="figure">
  <p><img src="../static/hovmoeller.png" alt="hovmoeller.png" style="width:90%" />
  </p>
  </div></li>

  <li><p>
  (<a href="#orge3d3e28">Groeskamp et al. 2019</a>)
  </p>
  <blockquote>
  <p>
  The following analogy illustrates the utility of buoyancy as a marker of water masses. Imagine a slightly tilted pile of Dutch pancakes sweetened with Canadian maple syrup. As the maple syrup is poured onto the top pancake, it readily spills over the sides but only slowly penetrates through to the interior. The disparate syrup transport arises because there is enhanced resistance to movement through a pancake but little resistance to movement along a pancake surface. We make use of this pancake analogy to conceptualize the stratification of ocean buoyancy and its influence on the associated transport of matter and heat.
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#org2037acc">Levine 1999</a>) on rescaling the Garrett-Munk spectrum
  </p>

  <div class="figure">
  <p><img src="../static/levine-99-scaling-gm.png" alt="levine-99-scaling-gm.png" style="width:50%" />
  </p>
  </div></li>

  <li><p>
  (<a href="#org9cd4e5d">Colosi 2016</a>)
  </p>
  <blockquote>
  <p>
  In 1979, Carl Wunsch famously asserted “Many sources for the internal wave field have been proposed; but it has not yet been possible to make the kind of statement that can be made about surface waves: namely, when the wind blows surface waves are generated and the larger the fetch and duration, the larger the waves.”
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#orgb3d6e68">Winters and D’Asaro 1994</a>):
  </p>
  <blockquote>
  <p>
  ... we generalize the term adiabatic to describe a process in which there is no heat or molecular mass transfer, and define a diabatic process as one that is not adiabatic.
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#orga0b1356">Munk 1981</a>) introduces the term "spiciness":
  </p>
  <blockquote>
  <p>
  They are here designated by π,for "spiciness" (hot and salty<sup>10</sup>)
  </p>

  <p>
  ...
  </p>

  <p>
  [10] Garrett points out that a lot of laboratory experiments have been sweet-and-sour rather than spicy.
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#org1a47902">Wunsch et al. 2009</a>) on instrumented elephant seals
  </p>
  <blockquote>
  <p>
  They are singled out here because they are almost our only data sets from under the Antarctic sea ice, and they perhaps represent the future, in which ever more species are used to obtain a truly global observation system<sup>2</sup>.
  </p>

  <p>
  ...
  </p>

  <p>
  [2] Perhaps, one day, animals can be bred to grow their own temperature, salinity, and pressure sensors, and GPS transmitters! Whether the existing system is damaging to the animals, and the more general ethical questions concerning animal use, must be discussed elsewhere.
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#orgda1d60f">Richardson and Stommel 1948</a>)
  </p>
  <blockquote>
  <p>
  In the sea we used floats of parsnip because it is easily visible, and because it is almost completely immersed so as not to catch the wind which, moreover, was slight. The floats were about 2cm in diameter.
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#orgb9df43e">Hughes and Williams 2010</a>)
  <img src="../static/hughes-sea-level-color.png" alt="hughes-sea-level-color.png" />
  </p>
  <blockquote>
  <p>
  the true relationship between spectrum and color turns out to be rather useful here. We are used to interpreting small differences from white light (“red” noise) as colors, so if the sea level spectrum was exactly “red” noise, a translation into a light spectrum would render it as a gray scale: low‐amplitude variability would be black, and high‐amplitude white, with grays at intermediate values.
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#org8074ba7">Gargett 1999</a>)
  </p>


  <div class="figure">
  <p><img src="../static/gargett-1999-velcro.png" alt="gargett-1999-velcro.png" style="width=70%" />
  </p>
  </div>

  <blockquote>
  <p>
  While a zipper makes a closure by the functioning of a single accurate mechanism, the same task can be accomplished by the closing of enough of the myriad tiny hooks and eyes that make up a strip of Velcro. Baker (1983) first used this analogy to suggest "the importance of many relatively cheap measurements that cover a broad area as opposed to expensive detailed measurements at a point." As an example, consider the merits of the plentiful satellite measurements of sea surface temperature (SST) compared with highly accurate but exceedingly sparse shipboard SST measurements. Satellite information on the spatial patterns of SST and the changes of these patterns in space and time have provided a revolutionary new view of the ocean—a view completely unattainable from SST measurements along ship tracks. In such "Velcro" techniques, the quantity of measurements allows a description of the spatial patterns associated with the underlying fluid flows, with detail impossible to obtain from sparse sampling. As has been the case with satellite SST, the quantitative accuracy of the remote sensing algorithm is determined and improved by comparison with "ground-truth" data from accurate but sparsely distributed sensors.
  </p>

  <p>
  The above analogy is of direct relevance to present state-of-the-art measurement of ocean turbulence, a field in which the accurate "zippers" are microscale profilers. While such profilers have become somewhat more common during the last decade, they remain relatively rare; are expensive to maintain and run; and in operation are often restricted by adverse conditions of weather, surface waves, or oceanic velocity shears.
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#orgec4bc6d">Ferrari and Wunsch 2009</a>)
  </p>
  <blockquote>
  <p>
  That turbulent mixing processes in the ocean are extremely important in determining the oceanic general circulation, and are major limiting factors in the ability to calculate future climate states, is a cliche in oceanography and climate dynamics. Unlike some other hackneyed statements, this one does retain much of its validity.
  </p>
  </blockquote>
  <p>
  And
  </p>
  <blockquote>
  <p>
  We have gone from the situation described in Wunsch &amp; Ferrari (2004) of being unable to account for the dissipation of geostrophic turbulence to the opposite case—there are now too many candidates.
  </p>
  </blockquote></li>
  <li><p>
  (<a href="#org775282d">Armi and Stommel 1983</a>)
  </p>
  <blockquote>
  <p>
  We are in effect bragging about the results of a high-resolution yet wide-angle (10°) telescope in the sense of an astronomer looking at the sky. We have only used the new telescope four times in one portion of the ocean.
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#orgd0934ca">Ferrari et al. 2008</a>)
  </p>
  <blockquote>
  <p>
  V Canuto and M Dubovikov were included as coauthors during the review process, because they contributed to resolving some inconsistencies in the original expressions for the eddy-induced streamfunction and the residual fluxes.
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#orgec2db27">Hughes et al. 2016</a>)
  </p>


  <div class="figure">
  <p><img src="../static/hughes-2016.png" alt="hughes-2016.png" style="width:90%" />
  </p>
  </div></li>

  <li><p>
  (<a href="#org6919188">Munk and Bills 2007</a>)
  </p>
  <blockquote>
  <p>
  The obliquity modulation of tidal mixing by a few percent and the associated  modulation in the meridional overturning circulation (MOC) may play a role comparable to the obliquity modulation of the incoming solar radiation (insolation), a cornerstone of the Milanković theory of ice ages. This speculation involves even more than the usual number of uncertainties found in climate speculations.
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#orgd8abf8e">Polzin et al. 2014</a>)
  </p>


  <div class="figure">
  <p><img src="../static/polzin-2014-schematic.png" alt="polzin-2014-schematic.png" style="width:75%" />
  </p>
  </div></li>

  <li><p>
  John Lumley, quoted in (<a href="#orge602496">Leibovich and Warhaft 2018</a>)
  </p>
  <blockquote>
  <p>
  Turbulence is rent by factionalism. Traditional approaches in the field are under attack, and one hears intemperate statements against long time averaging, Reynolds decomposition, and so forth. Some of these are reminiscent of the Einstein-Heisenberg controversy over quantum mechanics, and smack of a mistrust of any statistical approach. Coherent structure people sound like <i>The Emperor’s New Clothes</i> when they say that all turbulent flows consist primarily of coherent structures, in the face of visual evidence to the contrary. Dynamical systems theory people are sure that turbulence is chaos. Simulators have convinced many that we will be able to compute <i>anything</i> within a decade. Modeling is thus attacked as unnecessary, or irrelevant because it starts with Reynolds stress averaging or ignores coherent structures. The card-carrying physicists dismiss everything that has been done on turbulence from Osborne Reynolds until the last decade. Cellular Automata were hailed on their appearance as the answer to a maiden’s prayer, so far as turbulence was concerned. It is no wonder that funding agencies are confused. (quoted in Cantwell 1990, p. 97)
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#org3e23e76">Penland and Sardeshmukh 1995</a>) throw down a challenge:
  </p>

  <div class="figure">
  <p><img src="../static/penland-sardeshmukh.png" alt="penland-sardeshmukh.png" style="width:90%" />
  </p>
  </div></li>

  <li><p>
  (<a href="#org15d2b24">Vallis and Maltrud 1993</a>) :
  </p>
  <blockquote>
  <p>
  A factor of 2 sometimes finds itself, rather arbitrarily, in the denominator.
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#orgf67fa94">Flierl 1978</a>) quotes Karl Marx:
  </p>
  <blockquote>
  <p>
  A second and, in my opinion, more persuasive argument for our studies is that, in sensitive systems, a small quantitative error may lead to large qualitative errors<sup>1</sup>.
  </p>

  <p>
  ⋮
  </p>

  <p>
  [1] "Quantitative changes suddenly become qualitative changes" (Karl Marx)
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#org34e32aa">Holte and Talley 2009</a>)
  </p>
  <blockquote>
  <p>
  Most floats sampled at regular pressure levels, though the Canadian Argo floats often sampled at irregular pressures and required substantial editing.
  </p>
  </blockquote></li>

  <li><p>
  (<a href="#orgbac7c9f">Sutyrin and Flierl 1994</a>) note insufficient printer resolution in their Figure 2.
  </p>

  <div class="figure">
  <p><img src="../static/sutyrin-flierl-fig2.png" alt="sutyrin-flierl-fig2.png" style="width:70%" />
  </p>
  </div></li>

  <li><p>
  (<a href="#org704cc29">MacKinnon et al. 2017</a>) summarize
  </p>
  <blockquote>
  <p>
  A frequently asked question related to this work is “Which mixing processes matter most for climate?”. As with many alluringly comprehensive sounding questions, the answer is “it depends”.
  </p>
  </blockquote>
  <p>
  and then end on an inspiring note
  </p>
  <blockquote>
  <p>
  At the same time, the epiphanies, new ideas and novel observations that fundamentally drive the field forward frequently come not from big science, but from a cornucopia of much smaller exploratory efforts and the continued small-scale development of innovative observing technology and numerical techniques.  We must not lose the ability to be surprised.
  </p>
  </blockquote>

  <p>
  Also note the author order:
  </p>

  <div class="figure">
  <p><img src="../static/cpt-authors.png" alt="cpt-authors.png" style="width:80%" />
  </p>
  </div></li>

  <li><p>
  (<a href="#org51d2bcd">Wunsch 2016</a>) cites the Bible
  </p>
  <blockquote>
  <p>
  That which is far off, and exceeding deep, who can find it out?
  — Ecclesiastes 7:24 (King James Version)
  </p>
  </blockquote></li>

  <li><p>
  Enrico Fermi quotes John von Neumann to Freeman Dyson, critizing the latter's model (<a href="#orgd705f06">Dyson 2004</a>):
  </p>
  <blockquote>
  <p>
  "I remember my friend Johnny von Neumann used to say, with four parameters I can fit an elephant, and with five I can make him wiggle his trunk." — Enrico Fermi
  </p>
  </blockquote>


  <div class="figure">
  <p><img src="../static/elephant.png" alt="elephant.png" style="float:right;width:40%" />
  </p>
  </div>

  <p>
  (<a href="#org5ee6314">Mayer, Khairy, and Howard 2010</a>) take on the challenge yielding:
  </p>
  <blockquote>
  <p>
  The resulting shape is schematic and cartoonlike but is still recognizable as an elephant. Although the use of the Fourier coordinate expansion is not new, our approach clearly demonstrates its usefulness in reducing the number of parameters needed to describe a two-dimensional contour. In the special case of fitting an elephant, it is even possible to lower it to four complex parameters and therein implement a well-known saying.
  </p>
  </blockquote>
  <p>
  With five, they give the elephant an eye and make it's trunk wiggle!
  </p>

  <p>
  Python implementation <a href="https://www.johndcook.com/blog/2011/06/21/how-to-fit-an-elephant/">here</a>.
  </p></li>

  <li><p>
  ...
  </p>

  <div class="figure">
  <p><img src="../static/obama-author.png" alt="obama-author.png" style="width:100%" />
  </p>
  </div></li>

  <li><p>
  (<a href="#orgff48af0">Lindzen and Hou 1988</a>)
  </p>
  <blockquote>
  <p>
  As it turns out, the observations provide a clue to the problem.
  </p>
  </blockquote></li>
  </ul>

  </div>
  ]]></description>
</item>


<item>
  <title>"Death in the Gulf Stream" - A Hemingway cocktail</title>
  <link>http://www.cherian.net/rss.html#orga586cbc</link>
  <author>deepak@darya (Deepak Cherian)</author>
  <guid isPermaLink="false">http://www.cherian.net/rss.html#orga586cbc</guid>
  <pubDate>Sun, 17 Sep 2017 12:36:00 +0530</pubDate>

  <description><![CDATA[<p>
  From <a href="http://kottke.org/17/01/ernest-hemingways-cocktail-recipe-for-bad-times">Kottke</a> who got it from <a href="https://qz.com/889794/trump-inauguration-ernest-hemingway-has-a-cocktail-recipe-for-days-when-youve-had-just-enough-of-the-world/">Quartz</a>, a cocktail recipe created by Ernest Hemingway in 1937.
  </p>
  <blockquote>
  <p>
  Take a tall thin water tumbler and fill it with finely cracked ice.
  </p>

  <p>
  Lace this broken debris with 4 good purple splashes of Angostura, add the juice and crushed peel of 1 green lime, and fill glass almost full with Holland gin…
  </p>

  <p>
  No sugar, no fancying. It’s strong, it’s bitter—but so is English ale strong and bitter, in many cases.
  </p>

  <p>
  We don’t add sugar to ale, and we don’t need sugar in a “Death in the Gulf Stream”—or at least not more than 1 tsp. Its tartness and its bitterness are its chief charm.
  </p>
  </blockquote>
  ]]></description>
</item>
<item>
  <title>A setup for reproducible research</title>
  <link>http://www.cherian.net/rss.html#org6b48d4c</link>
  <author>deepak@darya (Deepak Cherian)</author>
  <guid isPermaLink="false">http://www.cherian.net/rss.html#org6b48d4c</guid>
  <pubDate>Sun, 17 Sep 2017 12:34:00 +0530</pubDate>

  <description><![CDATA[
  <div id="outline-container-org935c4e7" class="outline-3">
  <h3 id="org935c4e7"><span class="section-number-3">6.1</span> Update</h3>
  <div class="outline-text-3" id="text-6-1">
  <p>
  <a href="https://www.researchgate.net/profile/Andre_Paloczy">André Palóczy</a> has implemented some of <a href="https://github.com/apaloczy/reproducibility">these ideas in Python</a>.
  </p>
  </div>
  </div>
  <div id="outline-container-org09690da" class="outline-3">
  <h3 id="org09690da"><span class="section-number-3">6.2</span> Software</h3>
  <div class="outline-text-3" id="text-6-2">
  <ul class="org-ul">
  <li>Version control system to track content. I use <a href="http://www.git-scm.org"><code>git</code></a>.</li>
  <li><a href="http://www.sno.phy.queensu.ca/~phil/exiftool/"><code>exiftool</code></a> to read and write metadata to images</li>
  <li>I have some code below for MATLAB but the principles could be extended to any other software package.</li>
  </ul>
  </div>
  </div>
  <div id="outline-container-org54b1741" class="outline-3">
  <h3 id="org54b1741"><span class="section-number-3">6.3</span> Strategy</h3>
  <div class="outline-text-3" id="text-6-3">
  <p>
  The approach is simple: use <code>git</code> to track files that generate output.
  </p>

  <p>
  <code>git</code> automatically assigns a unique 40 character alphanumeric string (a "hash") that identifies the state of a repository.
  </p>

  <p>
  By saving the value of the hash when a certain output file is created, we know what code created the output.
  </p>

  <p>
  With data files, it is simple to add an extra variable containing the hash.
  </p>

  <p>
  With figures, I use the metadata fields to save the hash value.
  </p>
  </div>
  </div>
  <div id="outline-container-orgd9b29ec" class="outline-3">
  <h3 id="orgd9b29ec"><span class="section-number-3">6.4</span> Getting the current hash in MATLAB</h3>
  <div class="outline-text-3" id="text-6-4">
  <p>
  The following MATLAB function <code>githash</code> will return the hash of the last commit that modified the file in <code>fname</code>. If not provided with <code>fname</code> it returns the hash of the last commit in the repository.
  </p>

  <div class="org-src-container">
  <pre class="src src-matlab">   <span style="color: #E1BEE7;">function</span> <span style="color: #80CBC4;">[hash]</span> = <span style="color: #64B5F6;">githash</span>(<span style="color: #80CBC4;">fname</span>, <span style="color: #80CBC4;">gitdir</span>)

  <span style="color: #E1BEE7;">if</span> <span style="color: #FFCC80;">~</span>exist(<span style="color: #C5E1A5;">'fname', 'var'</span>)
  fname = <span style="color: #C5E1A5;">'.'</span>;
  <span style="color: #E1BEE7;">end</span>

  <span style="color: #E1BEE7;">if</span> <span style="color: #FFCC80;">~</span>exist(<span style="color: #C5E1A5;">'gitdir', 'var'</span>)
  gitdir = <span style="color: #C5E1A5;">''</span>;
  <span style="color: #E1BEE7;">else</span>
  gitdir = [<span style="color: #C5E1A5;">'--git-dir='</span> gitdir];
  <span style="color: #E1BEE7;">end</span>

  [<span style="color: #FFCC80;">~</span>, hashout] = system([<span style="color: #C5E1A5;">'TERM=xterm git '</span> gitdir <span style="text-decoration: underline;">...</span>
  <span style="color: #C5E1A5;">' log -n 1 --no-color --pretty=format:''%H'' '''</span> <span style="text-decoration: underline;">...</span>
  fname <span style="color: #C5E1A5;">''' &lt; /dev/null'</span>]);

  <span style="color: #757575;">% remove bash escape characters</span>
  hash = hashout(9<span style="color: #FFCC80;">:</span>48)
  <span style="color: #E1BEE7;">end</span>
  </pre>
  </div>

  <p>
  Using it in a MATLAB script requires the incantation
  </p>
  <div class="org-src-container">
  <pre class="src src-matlab">  hash = githash([mfilename(<span style="color: #C5E1A5;">'fullpath') '.m'</span>]);
  </pre>
  </div>
  <p>
  This provides <code>githash</code> with the path to the current mfile that is calling <code>githash</code>.
  </p>

  <p>
  Quite frequently, I calculate diagnostics that take a while which means that rerunning them every time I make an image is not feasible. I save the <code>hash</code> variable to the file containing diagnostic output. This lets me know what version of the code created that version of the saved output.
  </p>
  </div>
  </div>

  <div id="outline-container-orgb0454fb" class="outline-3">
  <h3 id="orgb0454fb"><span class="section-number-3">6.5</span> Using the hash</h3>
  <div class="outline-text-3" id="text-6-5">
  <p>
  MATLAB's FileExchange has a couple of useful scripts <a href="https://www.mathworks.com/matlabcentral/fileexchange/43179-insert-annotation-in-figure-s-metadata"><code>insertAnnotation</code> &amp; <code>getAnnotation</code></a> that insert and recover metadata in MATLAB figure windows.
  </p>

  <p>
  An obvious choice is to save the hash. More importantly, one can save the exact function call that generated a figure. Then, you know two things:
  </p>
  <ol class="org-ol">
  <li>the version of the code that created the figure, and</li>
  <li>all parameters provided to the code;</li>
  </ol>
  <p>
  both of which are saved in the metadata of the figure <i>itself</i>.
  </p>

  <p>
  <code>getAnnotation</code> can then recover the saved metadata when saving a figure to file.
  </p>
  </div>
  </div>

  <div id="outline-container-org8fb251f" class="outline-3">
  <h3 id="org8fb251f"><span class="section-number-3">6.6</span> Saving the hash in an image file</h3>
  <div class="outline-text-3" id="text-6-6">
  <p>
  Once you have a hash value, or any metadata in general, it needs to be saved when the image is saved. I have modified <code>export_fig</code> (<a href="https://github.com/altmany/export_fig">original</a>, <a href="https://github.com/dcherian/export_fig">my fork</a>) to do this for me.
  </p>

  <p>
  In general, all you need is a line that looks like
  </p>
  <div class="org-src-container">
  <pre class="src src-matlab">  system([<span style="color: #C5E1A5;">'exiftool -overwrite_original -Producer='</span> <span style="text-decoration: underline;">...</span>
  hash <span style="color: #C5E1A5;">' '</span> pdf_nam]);
  </pre>
  </div>
  <p>
  The above tells exiftool to save the contents of variable <code>hash</code> in the metadata field <code>Producer</code> of the file named <code>pdf_nam</code>. The slight complication here is that the metadata field names are not standardized among different image formats.
  </p>

  <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
  <caption class="t-above"><span class="table-number">Table 1:</span> Metadata fields for various image formats that I use to save hashes.</caption>

  <colgroup>
  <col  class="org-left" />

  <col  class="org-left" />

  <col  class="org-left" />

  <col  class="org-left" />

  <col  class="org-left" />
  </colgroup>
  <tbody>
  <tr>
  <td class="org-left"><b>format</b></td>
  <td class="org-left">pdf, eps</td>
  <td class="org-left">png</td>
  <td class="org-left">jpg</td>
  <td class="org-left">tif</td>
  </tr>

  <tr>
  <td class="org-left"><b>metadata field</b></td>
  <td class="org-left">Producer</td>
  <td class="org-left">Software</td>
  <td class="org-left">Comment</td>
  <td class="org-left">Description</td>
  </tr>
  </tbody>
  </table>

  <p>
  <code>exiftool</code> is only required to modify the metadata fields of PDF and EPS files. MATLAB's <code>imwrite</code> can write metadata to bitmap files (e.g. PNG).
  </p>

  <p>
  Searching for <code>hash</code> in my fork of <a href="https://github.com/dcherian/export_fig/blob/master/export_fig.m"><code>export_fig.m</code></a> will show you how <code>imwrite</code> can be used.
  </p>
  </div>
  </div>

  <div id="outline-container-org8667966" class="outline-3">
  <h3 id="org8667966"><span class="section-number-3">6.7</span> Extracting commit hash from image metadata</h3>
  <div class="outline-text-3" id="text-6-7">
  <p>
  To recover the recorded hash, it suffices to call <code>exiftool FILENAME</code> which will print all metadata stored in the image; not just the hash. <code>grep</code> can then find the recorded hash:
  </p>
  <div class="org-src-container">
  <pre class="src src-bash">  <span style="color: #757575;">#</span><span style="color: #757575;">!/bin/bash</span>
  <span style="color: #757575;"># </span><span style="color: #757575;">displays saved git hash of a provided file using exiftool</span>

  <span style="color: #80CBC4;">file</span>=$<span style="color: #80CBC4;">1</span>
  <span style="color: #80CBC4;">hash</span>=$(<span style="color: #fa8072;">exiftool</span> $<span style="color: #80CBC4;">file</span> | grep -i <span style="color: #C5E1A5;">"hash:"</span>)

  <span style="color: #80DEEA;">echo</span> $<span style="color: #80CBC4;">hash</span>
  </pre>
  </div>
  </div>
  </div>
  ]]></description>
</item>
</channel>
</rss>
